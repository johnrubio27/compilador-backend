/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,22],$V2=[1,23],$V3=[1,24],$V4=[1,25],$V5=[1,13],$V6=[1,15],$V7=[1,27],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,20],$Vc=[5,7,8,9,10,11,17,27,36,42,43,44,45,49],$Vd=[2,9],$Ve=[1,31],$Vf=[1,38],$Vg=[1,44],$Vh=[1,46],$Vi=[5,7,8,9,10,11,17,27,36,40,42,43,44,45,49],$Vj=[1,72],$Vk=[1,66],$Vl=[1,65],$Vm=[1,61],$Vn=[1,63],$Vo=[1,64],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[1,74],$Vv=[5,7,8,9,10,11,13,17,27,36,42,43,44,45,49],$Vw=[32,33],$Vx=[1,94],$Vy=[5,7,8,9,10,11,13,17,27,32,33,36,42,43,44,45,49,50],$Vz=[5,7,8,9,10,11,13,17,27,32,33,36,42,43,44,45,49,50,52],$VA=[5,7,8,9,10,11,13,17,27,32,33,36,42,43,44,45,49,50,52,54,55],$VB=[5,7,8,9,10,11,13,17,27,32,33,36,42,43,44,45,49,50,52,54,55,57,58,59,60],$VC=[5,7,8,9,10,11,13,17,27,32,33,36,42,43,44,45,49,50,52,54,55,57,58,59,60,62,63],$VD=[1,107],$VE=[5,7,8,9,10,11,13,17,27,32,33,36,42,43,44,45,49,50,52,54,55,57,58,59,60,62,63,65,66,67,68],$VF=[1,141],$VG=[5,7,8,9,10,11,13,17,27,32,33,36,42,43,44,45,49,50,52,54,55,57,58,59,60,62,63,65,66,67],$VH=[1,154],$VI=[2,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCTIONS":4,"EOF":5,"TYPE":6,"resinteger":7,"resdouble":8,"resboolean":9,"reschar":10,"resstring":11,"SEMICOLON":12,"puntocoma":13,"BLOCK":14,"corchetea":15,"BLOCK2":16,"corchetec":17,"INSTRUCTION":18,"DECLARATION":19,"ASSIGNMENT":20,"FUNCTION":21,"IF":22,"WHILE":23,"DOWHILE":24,"FOR":25,"PRINT":26,"id":27,"incremento":28,"decremento":29,"parenta":30,"LISTAVALORES":31,"parentc":32,"coma":33,"EXPRT":34,"LISTAPARAMETROS":35,"resvoid":36,"PARAMETROUNITARIO":37,"CELSE":38,"ELSE":39,"reselse":40,"IFF":41,"resif":42,"reswhile":43,"resdo":44,"resfor":45,"DEC":46,"ASSIG":47,"igual":48,"resprint":49,"or":50,"EXPRT1":51,"and":52,"EXPR":53,"diferente":54,"identico":55,"EXPR1":56,"mayor":57,"menor":58,"mayorigual":59,"menorigual":60,"EXP":61,"suma":62,"resta":63,"EXP1":64,"multiplicacion":65,"slash":66,"modulo":67,"potencia":68,"EXP2":69,"not":70,"EXP3":71,"decimal":72,"entero":73,"cadena":74,"caracter":75,"restrue":76,"resfalse":77,"resnull":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"resinteger",8:"resdouble",9:"resboolean",10:"reschar",11:"resstring",13:"puntocoma",15:"corchetea",17:"corchetec",27:"id",28:"incremento",29:"decremento",30:"parenta",32:"parentc",33:"coma",36:"resvoid",40:"reselse",42:"resif",43:"reswhile",44:"resdo",45:"resfor",48:"igual",49:"resprint",50:"or",52:"and",54:"diferente",55:"identico",57:"mayor",58:"menor",59:"mayorigual",60:"menorigual",62:"suma",63:"resta",65:"multiplicacion",66:"slash",67:"modulo",68:"potencia",70:"not",72:"decimal",73:"entero",74:"cadena",75:"caracter",76:"restrue",77:"resfalse",78:"resnull"},
productions_: [0,[3,2],[3,1],[6,1],[6,1],[6,1],[6,1],[6,1],[12,1],[12,0],[14,2],[16,2],[16,1],[4,2],[4,1],[18,2],[18,2],[18,1],[18,1],[18,1],[18,2],[18,1],[18,2],[18,3],[18,3],[18,5],[18,4],[31,3],[31,1],[21,6],[21,6],[21,5],[21,5],[35,4],[35,2],[37,3],[22,2],[38,3],[38,1],[39,2],[39,0],[41,3],[23,3],[24,4],[25,9],[25,8],[46,1],[46,1],[46,0],[47,1],[47,2],[47,2],[47,0],[20,3],[19,4],[26,2],[34,3],[34,1],[51,3],[51,1],[53,3],[53,3],[53,1],[56,3],[56,3],[56,3],[56,3],[56,1],[61,3],[61,3],[61,1],[64,3],[64,3],[64,3],[64,3],[64,1],[69,2],[69,1],[71,1],[71,1],[71,2],[71,2],[71,3],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        for(var i = 0; i< $$[$0-1].length; i++){
            if($$[$0-1][i])
                $$[$0-1][i].operate(symbolt, count)
        }
        global_var = []
        ret = count;
        count = new Count();
        symbolt = new SymbolTable(null);
        symbolt.count = count;
        symbolt.functions = [];
        return ret;
    
break;
case 3:
this.$ = Type.ENTERO
break;
case 4:
this.$ = Type.DECIMAL
break;
case 5:
this.$ = Type.BOOL
break;
case 6:
this.$ = Type.CARACTER
break;
case 7:
this.$ = Type.CADENA
break;
case 10: case 18: case 19: case 21: case 46: case 47: case 49: case 57: case 59: case 62: case 67: case 70: case 75: case 77:
this.$ = $$[$0];
break;
case 11: case 16: case 20: case 22: case 35: case 82:
this.$ = $$[$0-1];
break;
case 12:
this.$ = []
break;
case 13:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 14:
this.$ = []; this.$.push($$[$0])
break;
case 15:
if($$[$0-1] != null){this.$ = $$[$0-1]}
break;
case 17:
symbolt.addFunction($$[$0]);
break;
case 23:
this.$ = new Unary($$[$0-2],Type.INCREMENTO,this._$.first_line,this._$.first_column);
break;
case 24:
this.$ = new Unary($$[$0-2],Type.DECREMENTO,this._$.first_line,this._$.first_column);
break;
case 25:
 this.$ = new Call($$[$0-4],null,Type.LLAMADA,$$[$0-2],this._$.first_line,this._$.first_column);
break;
case 26:
 this.$ = new Call($$[$0-3],null,Type.LLAMADA,null,this._$.first_line,this._$.first_column);
break;
case 27:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 28:
 this.$ = []; this.$.push($$[$0]);
break;
case 29:
this.$ = new Function($$[$0-5],Type.VALOR,$$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 30:
this.$ = new Function(Type.VOID,Type.VALOR,$$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 31:
this.$ = new Function($$[$0-4],Type.VALOR,$$[$0-3],null,$$[$0],this._$.first_line,this._$.first_column);
break;
case 32:
this.$ = new Function(Type.VOID,Type.VALOR,$$[$0-3],null,$$[$0],this._$.first_line,this._$.first_column);
break;
case 33:
this.$ = $$[$0-3]; this.$.push(new Declaration($$[$0],null,$$[$0-1],Type.VALOR, Type.LOCAL,this._$.first_line,this._$.first_column));
break;
case 34:
this.$ = []; this.$.push(new Declaration($$[$0],null,$$[$0-1],Type.VALOR, Type.LOCAL,this._$.first_line,this._$.first_column));
break;
case 36:
var t = $$[$0-1];t.elsebody = $$[$0];this.$ = t;
break;
case 37:
var t = $$[$0-2]; t.lif.push($$[$0]); this.$ = t;
break;
case 38:
var t = new IfList();t.lif.push($$[$0]);this.$ = t;
break;
case 39:
this.$ = new Else($$[$0],this._$.first_line,this._$.first_column);
break;
case 40: case 48: case 52:
this.$ = null;
break;
case 41:
this.$ = new If($$[$0-1],$$[$0],Type.IF,this._$.first_line,this._$.first_column);
break;
case 42:
this.$ = new While($$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
break;
case 43:
this.$ = new DoWhile($$[$0],$$[$0-2],this._$.first_line,this._$.first_column);
break;
case 44:
this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 45:
this.$ = new For($$[$0-5],null,$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 50:
this.$ = new Unary($$[$0-1],Type.INCREMENTO,this._$.first_line,this._$.first_column);
break;
case 51:
this.$ = new Unary($$[$0-1],Type.DECREMENTO,this._$.first_line,this._$.first_column);
break;
case 53:
this.$ = new Assignment($$[$0-2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 54:
this.$ = new Declaration($$[$0-2],$$[$0],$$[$0-3],Type.VALOR, Type.LOCAL,this._$.first_line,this._$.first_column);
break;
case 55:
this.$ = new Print($$[$0],null, Type.IMPRIMIR,this._$.first_line,this._$.first_column);
break;
case 56:
this.$ = new Logical($$[$0-2],$$[$0],Type.XOR,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 58:
this.$ = new Logical($$[$0-2],$$[$0],Type.OR,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 60:
this.$ = new Relational($$[$0-2],$$[$0],Type.DIFERENTE,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 61:
this.$ = new Relational($$[$0-2],$$[$0],Type.IDENTICO,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 63:
this.$ = new Relational($$[$0-2],$$[$0],Type.MAYOR,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 64:
this.$ = new Relational($$[$0-2],$$[$0],Type.MENOR,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 65:
this.$ = new Relational($$[$0-2],$$[$0],Type.MAYORIGUAL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 66:
this.$ = new Relational($$[$0-2],$$[$0],Type.MENORIGUAL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 68:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.SUMA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 69:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.RESTA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 71:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.MULTIPLICACION,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 72:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.DIVISION,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 73:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.MODULO,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 74:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.POTENCIA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 76:
this.$ = new Logical($$[$0],null,Type.NOT,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 78:
this.$ = new Value(Number($$[$0]),Type.DECIMAL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 79:
this.$ = new Value(Number($$[$0]),Type.ENTERO,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 80:
this.$ = new Value(-1*Number($$[$0]),Type.DECIMAL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 81:
this.$ = new Value(-1*Number($$[$0]),Type.ENTERO,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 83:
this.$ = new Value($$[$0],Type.CADENA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 84:
this.$ = new Value($$[$0],Type.CARACTER,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 85:
this.$ = new Value(true,Type.BOOL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 86:
this.$ = new Value(false,Type.BOOL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 87:
this.$ = new Value($$[$0],Type.NULL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 88:
this.$ = new Value($$[$0],Type.ID,Type.VALOR,this._$.first_line,this._$.first_column);
break;
}
},
table: [{3:1,4:2,5:[1,3],6:14,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,18:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,26:12,27:$V5,36:$V6,38:16,41:26,42:$V7,43:$V8,44:$V9,45:$Va,49:$Vb},{1:[3]},{5:[1,28],6:14,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,18:29,19:5,20:6,21:7,22:8,23:9,24:10,25:11,26:12,27:$V5,36:$V6,38:16,41:26,42:$V7,43:$V8,44:$V9,45:$Va,49:$Vb},{1:[2,2]},o($Vc,[2,14]),o($Vc,$Vd,{12:30,13:$Ve}),o($Vc,$Vd,{12:32,13:$Ve}),o($Vc,[2,17]),o($Vc,[2,18]),o($Vc,[2,19]),o($Vc,$Vd,{12:33,13:$Ve}),o($Vc,[2,21]),o($Vc,$Vd,{12:34,13:$Ve}),{28:[1,35],29:[1,36],30:[1,37],48:$Vf},{27:[1,39]},{27:[1,40]},o($Vc,[2,40],{39:41,40:[1,42]}),{30:$Vg,37:43},{14:45,15:$Vh},{30:[1,47]},{30:$Vg,37:48},{27:[2,3]},{27:[2,4]},{27:[2,5]},{27:[2,6]},{27:[2,7]},o($Vi,[2,38]),{30:$Vg,37:49},{1:[2,1]},o($Vc,[2,13]),o($Vc,[2,15]),o($Vc,[2,8]),o($Vc,[2,16]),o($Vc,[2,20]),o($Vc,[2,22]),o($Vc,$Vd,{12:50,13:$Ve}),o($Vc,$Vd,{12:51,13:$Ve}),{27:$Vj,30:$Vk,31:52,32:[1,53],34:54,51:55,53:56,56:57,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{27:$Vj,30:$Vk,34:73,51:55,53:56,56:57,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{30:[1,75],48:$Vu},{30:[1,76]},o($Vc,[2,36]),{14:78,15:$Vh,41:77,42:$V7},{14:79,15:$Vh},{27:$Vj,30:$Vk,34:80,51:55,53:56,56:57,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{43:[1,81]},{4:83,6:14,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,16:82,17:[1,84],18:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,26:12,27:$V5,36:$V6,38:16,41:26,42:$V7,43:$V8,44:$V9,45:$Va,49:$Vb},{6:88,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,13:[2,48],19:86,20:87,27:[1,89],46:85},o($Vv,[2,55]),{14:90,15:$Vh},o($Vc,[2,23]),o($Vc,[2,24]),{32:[1,91],33:[1,92]},o($Vc,$Vd,{12:93,13:$Ve}),o($Vw,[2,28],{50:$Vx}),o($Vy,[2,57],{52:[1,95]}),o($Vz,[2,59],{54:[1,96],55:[1,97]}),o($VA,[2,62],{57:[1,98],58:[1,99],59:[1,100],60:[1,101]}),o($VB,[2,67],{62:[1,102],63:[1,103]}),o($VC,[2,70],{65:[1,104],66:[1,105],67:[1,106],68:$VD}),o($VE,[2,75]),{27:$Vj,30:$Vk,63:$Vl,69:108,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},o($VE,[2,77]),o($VE,[2,78]),o($VE,[2,79]),{72:[1,109],73:[1,110]},{27:$Vj,30:$Vk,34:111,51:55,53:56,56:57,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},o($VE,[2,83]),o($VE,[2,84]),o($VE,[2,85]),o($VE,[2,86]),o($VE,[2,87]),o($VE,[2,88]),o([5,7,8,9,10,11,13,17,27,32,36,42,43,44,45,49],[2,53],{50:$Vx}),{27:$Vj,30:$Vk,34:112,51:55,53:56,56:57,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{6:115,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,32:[1,114],35:113},{6:115,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,32:[1,117],35:116},o($Vi,[2,37]),o($Vc,[2,39]),o($Vc,[2,42]),{32:[1,118],50:$Vx},{30:$Vg,37:119},o($Vi,[2,10]),{6:14,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,17:[1,120],18:29,19:5,20:6,21:7,22:8,23:9,24:10,25:11,26:12,27:$V5,36:$V6,38:16,41:26,42:$V7,43:$V8,44:$V9,45:$Va,49:$Vb},o($Vi,[2,12]),{13:[1,121]},{13:[2,46]},{13:[2,47]},{27:[1,122]},{48:$Vf},o($Vi,[2,41]),o($Vc,$Vd,{12:123,13:$Ve}),{27:$Vj,30:$Vk,34:124,51:55,53:56,56:57,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},o($Vc,[2,26]),{27:$Vj,30:$Vk,34:125,51:55,53:56,56:57,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{27:$Vj,30:$Vk,51:126,53:56,56:57,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{27:$Vj,30:$Vk,53:127,56:57,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{27:$Vj,30:$Vk,53:128,56:57,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{27:$Vj,30:$Vk,56:129,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{27:$Vj,30:$Vk,56:130,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{27:$Vj,30:$Vk,56:131,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{27:$Vj,30:$Vk,56:132,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{27:$Vj,30:$Vk,61:133,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{27:$Vj,30:$Vk,61:134,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{27:$Vj,30:$Vk,63:$Vl,64:135,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{27:$Vj,30:$Vk,63:$Vl,64:136,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{27:$Vj,30:$Vk,63:$Vl,64:137,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{27:$Vj,30:$Vk,63:$Vl,64:138,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},o($VE,[2,76]),o($VE,[2,80]),o($VE,[2,81]),{32:[1,139],50:$Vx},o($Vv,[2,54],{50:$Vx}),{32:[1,140],33:$VF},{14:142,15:$Vh},{27:[1,143]},{32:[1,144],33:$VF},{14:145,15:$Vh},o([5,7,8,9,10,11,13,15,17,27,36,42,43,44,45,49],[2,35]),o($Vv,[2,43]),o($Vi,[2,11]),{13:[1,147],27:$Vj,30:$Vk,34:146,51:55,53:56,56:57,61:58,63:$Vl,64:59,69:60,70:$Vm,71:62,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{48:$Vu},o($Vc,[2,25]),o($Vw,[2,27],{50:$Vx}),o($Vy,[2,56]),o($Vz,[2,58]),o($VA,[2,60]),o($VA,[2,61]),o($VB,[2,63]),o($VB,[2,64]),o($VB,[2,65]),o($VB,[2,66]),o($VC,[2,68]),o($VC,[2,69]),o($VG,[2,71],{68:$VD}),o($VG,[2,72],{68:$VD}),o($VG,[2,73],{68:$VD}),o($VG,[2,74],{68:$VD}),o($VE,[2,82]),{14:148,15:$Vh},{6:149,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4},o($Vc,[2,31]),o($Vw,[2,34]),{14:150,15:$Vh},o($Vc,[2,32]),{13:[1,151],50:$Vx},{20:153,27:$VH,32:$VI,47:152},o($Vc,[2,29]),{27:[1,155]},o($Vc,[2,30]),{20:153,27:$VH,32:$VI,47:156},{32:[1,157]},{32:[2,49]},{28:[1,158],29:[1,159],48:$Vf},o($Vw,[2,33]),{32:[1,160]},{14:161,15:$Vh},{32:[2,50]},{32:[2,51]},{14:162,15:$Vh},o($Vc,[2,45]),o($Vc,[2,44])],
defaultActions: {3:[2,2],21:[2,3],22:[2,4],23:[2,5],24:[2,6],25:[2,7],28:[2,1],86:[2,46],87:[2,47],153:[2,49],158:[2,50],159:[2,51]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const Logical = require('./clases/Logical');
	const Relational = require('./clases/Relational');
    const Arithmetical = require('./clases/Arithmetical');
    const Value = require('./clases/Value');
    const Print = require('./clases/Print');
    const Declaration = require('./clases/Declaration');
    const IfList = require('./clases/IfList');
    const Else = require('./clases/Else');
    const If = require('./clases/If');
    const While = require('./clases/While');
    const DoWhile = require('./clases/DoWhile');
    const Assignment = require('./clases/Assignment');
    const For = require('./clases/For');
    const Unary = require('./clases/Unary');
	const Type = require('./clases/Type');
    const Count = require('./clases/Counters');
    const SymbolTable = require('./clases/SymbolTable');
	const Call = require('./clases/Call');
    const Function = require('./clases/Function');
    global_var = []
    var count = new Count();
    var symbolt = new SymbolTable(null);
    symbolt.count = count;
    symbolt.functions = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2:return 28;
break;
case 3:return 29;
break;
case 4:return 62;
break;
case 5:return 63;   
break;
case 6:return 65;
break;
case 7:return 68;
break;
case 8:return 66;
break;
case 9:return 67;
break;
case 10:return 59;
break;
case 11:return 60;
break;
case 12:return 58;
break;
case 13:return 57;
break;
case 14:return 55;
break;
case 15:return 54;
break;
case 16:return 15;     
break;
case 17:return 17;
break;
case 18:return 30;     
break;
case 19:return 32;
break;
case 20:return 33;
break;
case 21:return 'punto';
break;
case 22:return 48;
break;
case 23:return 13;
break;
case 24:return 70;
break;
case 25:return 52;
break;
case 26:return 50;
break;
case 27:return 78;
break;
case 28:return 7;
break;
case 29:return 8;
break;
case 30:return 10;
break;
case 31:return 11;
break;
case 32:return 76;
break;
case 33:return 77;
break;
case 34:return 42;
break;
case 35:return 40;
break;
case 36:return 49;
break;
case 37:return 45;
break;
case 38:return 43;
break;
case 39:return 44;
break;
case 40:return 9;
break;
case 41:return 36;
break;
case 42:
break;
case 43:
break;
case 44:return 75;
break;
case 45:return 72;
break;
case 46:return 73;
break;
case 47:return 74;
break;
case 48:return 27;
break;
case 49:return 5;
break;
case 50: count.putError(Type.LEXICO,'Este es un error léxico: ' + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:\.)/i,/^(?:=)/i,/^(?:;)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:print\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:'([^']|\\n|\\r|\\t)')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/i,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""ñ""Ñ"]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}